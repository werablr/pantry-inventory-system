
### **Permanent Seed Prompt**

**Project:** Scanner-Langchain-Orchestrator

**Objective:** Build a rock-solid foundation for an AI-driven scanner workflow, prioritizing database validation and incremental, testable steps before adding complexity.

**Core Principles:**
1.  **Database First:** All operations must query the real Supabase database. No hardcoded data or mock objects are permitted.
2.  **Incremental Validation:** Each phase and step must be fully validated before proceeding to the next.
3.  **No Shortcuts:** Adhere strictly to the established plan. Any deviation must be flagged and approved.
4.  **JSON-First AI:** All AI model interactions must request and return structured JSON to ensure predictable, machine-readable outputs.

**Agent Roles:**
* **Brian (Operator):** Executes commands in the terminal and has final approval.
* **ChatGPT (Command Advisor & File Editor):** Provides copyable terminal commands and can edit files in VS Code. Will be monitored closely for accuracy.
* **Desktop Claude (Supabase Operator):** Manages all Supabase schema and data operations.
* **Gemini & Perplexity (Plan Trackers & Quality Control):** Monitor logs, enforce the plan, flag deviations, and confirm when phases are complete.

**The Official Plan of Record:**

| Phase | Step | Description |
| :--- | :--- | :--- |
| **1** | **Foundation** | Build and test the orchestrator's core logic using simulated AI. |
| 1.1 | Verify DB Connection | Confirm script can read `agent_prompts` and `prompt_chaining_map`. |
| 1.2 | Foundation Orchestrator | Execute the orchestrator with real DB data but simulated AI. |
| 1.3 | Validate Workflow | Confirm the full chain runs to completion with simulated responses. |
| **2** | **AI Integration & Enrichment** | Gradually replace simulation with real AI calls and data. |
| 2.1 | Integrate Single AI Model | Replace simulation with a real API call to the primary AI (Claude). |
| 2.2 | Enrich Prompt (RAG) | Fetch data from the database and inject it into the prompt for the AI. |
| 2.3 | Implement Fallback Chain | Add logic to try a secondary AI model if the primary fails. |
| 2.4 | Integrate Gemini Verification | Add a verification tool for fact-checking and analysis. |

***

### **Summary of Previous Log (8 July)**

* **Where We Were:** The project was blocked on **Phase 2.2 (Enrich Prompt)**. [cite_start]The orchestrator was failing because it couldn't retrieve project metadata from the `projects` table due to a Row-Level Security (RLS) policy in Supabase that was denying access to the `anon` key. [cite: 574, 582, 589]

* **Current Status:** The RLS issue has been **resolved**. [cite_start]A temporary development policy was added to the `projects` table, allowing read access. [cite: 617, 618] [cite_start]A subsequent test run of the orchestrator confirmed that it can now successfully retrieve the project details from the database. [cite: 632] [cite_start]The AI correctly received the enriched context and returned the expected structured JSON. [cite: 633, 634, 635] [cite_start]**Phase 2.2 is now complete.** [cite: 641]

* **Next Step:** The immediate next action is to begin **Phase 2.3**, which involves implementing the real-world external API call to the **Nutritionix API**. [cite_start]The current orchestrator logic successfully identifies that this is the next step in the workflow but does not yet contain the code to execute the API call. [cite: 642, 646, 647]

## **9 July Log**

9 July 2025 ‚Äì Scanner Project Progress Log

‚úÖ Progress

Resolved the RLS issue that was blocking project metadata retrieval in Supabase. 

Successfully fetched project metadata and logs. 

Implemented the Nutritionix API lookup logic within 

scanner_foundation_orchestrator.js. 

Confirmed that 

Phase 2.3 now completes with a real API call. 

‚ö†Ô∏è Challenges

A valid project ID was returning 0 rows from Supabase because the 

anon role lacked read access due to RLS policies. 

The Nutritionix API chain was previously stalled at a "pending" status because the actual execution logic had not yet been implemented. 

üõ†Ô∏è Actions Taken

An RPC debug function was added to the orchestrator to log the current Supabase session role. 

After confirming the policy was missing, a temporary universal read policy was applied to the 

projects table. 

Once metadata retrieval was successful, the policy was reverted to the more secure 

authenticated role. 

Conditional logic was added to the orchestrator to perform a live Nutritionix API lookup. 

üö´ Policy Reinforcement ‚Äì No Forward Progress Without Resolution

As of 9 July 2025, a new, stricter policy is in effect that supersedes any previous fallback-first logic: 

‚ÄúAll errors, failures, and ambiguous results must be fixed at the root. No fallback chaining or error bypassing is allowed.‚Äù 

Fallback prompts like "Manual Entry" are now gated. 

The workflow will 

fail hard on any incomplete or partial AI output. 

Claude's responses must be complete, structured, and valid before the workflow can continue. 

Execution will halt if required data is missing or unclear until the root issue is resolved, preventing tech debt. 